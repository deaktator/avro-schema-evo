/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.deaktator.testing.p2;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ScoreN extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4958546905364907788L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ScoreN\",\"namespace\":\"testing.p2\",\"fields\":[{\"name\":\"value\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\"}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.Integer> value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public ScoreN() {}

  /**
   * All-args constructor.
   * @param value The new value for value
   */
  public ScoreN(java.util.List<java.lang.Integer> value) {
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: value = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.util.List<java.lang.Integer> getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.util.List<java.lang.Integer> value) {
    this.value = value;
  }

  /**
   * Creates a new ScoreN RecordBuilder.
   * @return A new ScoreN RecordBuilder
   */
  public static ScoreN.Builder newBuilder() {
    return new ScoreN.Builder();
  }

  /**
   * Creates a new ScoreN RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new ScoreN RecordBuilder
   */
  public static ScoreN.Builder newBuilder(ScoreN.Builder other) {
    return new ScoreN.Builder(other);
  }

  /**
   * Creates a new ScoreN RecordBuilder by copying an existing ScoreN instance.
   * @param other The existing instance to copy.
   * @return A new ScoreN RecordBuilder
   */
  public static ScoreN.Builder newBuilder(ScoreN other) {
    return new ScoreN.Builder(other);
  }

  /**
   * RecordBuilder for ScoreN instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ScoreN>
    implements org.apache.avro.data.RecordBuilder<ScoreN> {

    private java.util.List<java.lang.Integer> value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(ScoreN.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing ScoreN instance
     * @param other The existing instance to copy.
     */
    private Builder(ScoreN other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.value)) {
        this.value = data().deepCopy(fields()[0].schema(), other.value);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public ScoreN.Builder setValue(java.util.List<java.lang.Integer> value) {
      validate(fields()[0], value);
      this.value = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public ScoreN.Builder clearValue() {
      value = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public ScoreN build() {
      try {
        ScoreN record = new ScoreN();
        record.value = fieldSetFlags()[0] ? this.value : (java.util.List<java.lang.Integer>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
